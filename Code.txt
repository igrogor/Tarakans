import java.awt.Graphics;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;

abstract public class Ant {
    protected double x;
    protected double y;
    int birthTime;
    int lifeTime;
    int id;

    boolean returning; // Добавляем поле для отслеживания направления движения муравья
    double angle; // Для муравьев-воинов, чтобы хранить текущий угол движения
    double speed; // Для муравьев-воинов, чтобы хранить скорость движения


    //protected BufferedImage icon;
    abstract void draw(Graphics g);
    abstract void move();
}
import java.util.Iterator;
import java.util.Random;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;

public class AntWarrior extends Ant implements Comparable<AntWarrior> {
    BufferedImage icon;
    JLabel label;

    int birthTime;
    int lifeTime;
    int id;
    App MAMO4ka;
    boolean derection;

    double homeX; // Начальная координата X
    double homeY; // Начальная координата Y

    AntWarrior(int simulationTime, App Charon_B) {
        Random random = new Random();
        derection = random.nextBoolean();
        
        MAMO4ka = Charon_B;
        Random rand = new Random();
        x = rand.nextInt(800);
        y = rand.nextInt(800);

        homeX = x;
        homeY = y;

        this.birthTime = simulationTime;
        this.lifeTime = MAMO4ka.HARDBASS;

        this.id = MAMO4ka.Magnit.habitat.antIds.size() + 1;

        try {
            icon = ImageIO.read(new File("Tarakan_is_Photo_1.jpg"));
        } catch (IOException e) {
            icon = null;
        }
        label = new JLabel(new ImageIcon(icon.getScaledInstance(100, 100, Image.SCALE_SMOOTH)));
    }

    void draw(Graphics g) {
        g.drawImage(icon, (int)x, (int)y, 80, 60, null);
    }

    void move() {
        System.out.println("Move");
    }

    boolean isAlive(int currentTime) {
        return currentTime - birthTime < lifeTime;
    }

    int getX() {
        return (int)x;
    }

    @Override
    public int compareTo(AntWarrior o) {
        return this.getX() - o.getX();
    }


}



import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

public class AntWorker extends Ant{
    BufferedImage icon;
    JLabel label;

    Random random = new Random();

    
    int birthTime;
    int lifeTime;

    int id;
    App PAPO4Ka;

    boolean derection;

    double homeX; // Начальная координата X
    double homeY; // Начальная координата Y

    int pre_direction = 5;
    int direction = random.nextInt(4);

    AntWorker(int simulationTime, App Prima) {







        derection = random.nextBoolean();


        PAPO4Ka = Prima;
        Random rand = new Random();
        x = rand.nextInt(800);
        y = rand.nextInt(800);

        homeX = x;
        homeY = y;

        this.birthTime = simulationTime;
        this.lifeTime = PAPO4Ka.HARDBASS;

        this.id = rand.nextInt( 1000);


        try {
            icon = ImageIO.read(new File("Tarakan_is_Photo_2.png"));
        } catch (IOException e) {
            icon = null;
        }
        label = new JLabel(new ImageIcon(icon.getScaledInstance(100, 100, Image.SCALE_SMOOTH)));
    }

    void draw(Graphics g) {
        g.drawImage(icon, (int)x, (int)y, 60, 80, null);
    }

    void move() {
        System.out.println("Move");
    }

    boolean isAlive(int currentTime) {
        return currentTime - birthTime < lifeTime;
    }


}

// Говнокод ON

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.TextArea;
import java.awt.TextComponent;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.lang.Thread;

public class App extends JFrame {
    static JPanel MariaRa;
    static JPanel BAR;
    static Rivyera Magnit;
    MessageBox msgBox;
    MessageBox Error;
    JLabel timer1;
    int period = 500;
    TextField ZaycevNET;
    TextField Mikhail_Evdokimov;
    int a = 1000;
    int HARDBASS = 30;
    JButton B;
    JButton E;
    JButton B_2;
    JButton E_2;
    JButton awake;
    JButton sleep;
    BaseAI DmitryShilow;
    WorkerAntAI workerAI;
    WarriorAntAI warriorAI;
    
        public App(WorkerAntAI workerAI, WarriorAntAI warriorAI) {
            this.workerAI = workerAI;
            this.warriorAI = warriorAI;

        setSize(2, 2);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        B = new JButton("START");
        B.setFont(new Font("Papyrus", Font.ITALIC, 40));
        E = new JButton("STOP");
        MariaRa = new JPanel();
        MariaRa.setBackground(new Color(201, 139, 91));
        MariaRa.add(B);
        MariaRa.add(E);
        Magnit = new Rivyera(this);


        WorkerAntAI be = new WorkerAntAI(Magnit.habitat);
        WarriorAntAI bv = new WarriorAntAI(Magnit.habitat);
        be.start();
        bv.start();



        timer1 = new JLabel(String.valueOf(Magnit.habitat.timer_1));
        timer1.setVisible(Magnit.habitat.numTimer);
        B.setFocusable(false);
        E.setFocusable(false);
        // статистика по такраканам ON
        // -------------------------------------------------------
        ButtonGroup group = new ButtonGroup();
        JRadioButton visibel, invisible;
        visibel = new JRadioButton("VISIBLE TIME");
        group.add(visibel);
        MariaRa.add(visibel);
        MariaRa.setFocusable(false);
        visibel.setFocusable(false);

        visibel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.numTimer = true;
                timer1.setVisible(Magnit.habitat.numTimer);
            }
        });

        invisible = new JRadioButton("INVISIBLE TIME");
        group.add(invisible);
        MariaRa.add(invisible);
        invisible.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.numTimer = false;
                timer1.setVisible(Magnit.habitat.numTimer);
            }
        });
        timer1.setFocusable(false);

        invisible.setFocusable(false);
        // OFF------------------------------------------------------------------------------------

        // start "Tarakan the game"
        // -------------------------------------------------------------------
        B.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.toggleSimulation();
                B.setEnabled(false);
                E.setEnabled(true);
            }
        });

        E.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.stopSimulation();
                // статистика по тараканам
                // MariaRa.add(textArea);
                newWindow();

            }
        });

        // stop "Tarakan the game"
        // ------------------------------------------------------------------

        MariaRa.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 3, Color.BLACK));

        add(MariaRa, BorderLayout.WEST);
        add(Magnit, BorderLayout.CENTER);

        MariaRa.setFocusable(false);
        Magnit.setFocusable(false);

        Timer timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Magnit.repaint();
            }
        });

        timer.start();
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_B) {
                    System.out.println("B");
                    Magnit.habitat.toggleSimulation();
                }

                if (e.getKeyCode() == KeyEvent.VK_E) {
                    System.out.println("E");
                    Magnit.habitat.stopSimulation();
                    newWindow();
                    msgBox.setVisible(true);
                }

                if (e.getKeyCode() == KeyEvent.VK_T) {
                    System.out.println("T");
                    Magnit.habitat.numTimer = !Magnit.habitat.numTimer;
                    visibel.setSelected(Magnit.habitat.numTimer);// --- ???????????????????????????????????????
                    invisible.setSelected(!Magnit.habitat.numTimer);// ----??????????????????????????????
                    timer1.setVisible(Magnit.habitat.numTimer);

                }
            }
        });

        JCheckBox lenta = new JCheckBox("statistic");
        lenta.setFocusable(false);

        lenta.addItemListener((ItemListener) new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                msgBox.setVisible(!msgBox.isVisible());
            }
        });

        // установка периода ON
        ZaycevNET = new TextField();
        ZaycevNET.setText("1000");
        ZaycevNET.setColumns(10);
        ZaycevNET.setFocusable(true);

        try {
            a = Integer.parseInt(ZaycevNET.getText());
        } catch (NumberFormatException e) {
            fail();
            ZaycevNET.setText("1000");
            a = 1000;
        }
        MariaRa.add(ZaycevNET);
        // установка периода OFF

        // установка времени жизни ON
        Mikhail_Evdokimov = new TextField();
        Mikhail_Evdokimov.setText("30");
        Mikhail_Evdokimov.setColumns(10);
        Mikhail_Evdokimov.setFocusable(true);

        try {
            HARDBASS = Integer.parseInt(Mikhail_Evdokimov.getText());
        } catch (NumberFormatException e) {
            fail();
            Mikhail_Evdokimov.setText("30");
            HARDBASS = 30;
        }
        MariaRa.add(Mikhail_Evdokimov);
        // установка времени жизни OFF

        // spawn ON
        JComboBox spawnChanse = new JComboBox();
        spawnChanse.addItem("10%");
        spawnChanse.addItem("20%");
        spawnChanse.addItem("30%");
        spawnChanse.addItem("40%");
        spawnChanse.addItem("50%");
        spawnChanse.addItem("60%");
        spawnChanse.addItem("70%");
        spawnChanse.addItem("80%");
        spawnChanse.addItem("90%");
        spawnChanse.addItem("100%");
        MariaRa.add(spawnChanse);
        spawnChanse.setFocusable(false);

        spawnChanse.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                switch (spawnChanse.getSelectedIndex()) {
                    case 1:
                        Magnit.habitat.nuclearBomb = 9;
                        break;
                    case 2:
                        Magnit.habitat.nuclearBomb = 8;
                        break;
                    case 3:
                        Magnit.habitat.nuclearBomb = 7;
                        break;
                    case 4:
                        Magnit.habitat.nuclearBomb = 6;
                        break;
                    case 5:
                        Magnit.habitat.nuclearBomb = 5;
                        break;
                    case 6:
                        Magnit.habitat.nuclearBomb = 4;
                        break;
                    case 7:
                        Magnit.habitat.nuclearBomb = 3;
                        break;
                    case 8:
                        Magnit.habitat.nuclearBomb = 2;
                        break;
                    case 9:
                        Magnit.habitat.nuclearBomb = 1;
                        break;
                    case 10:
                        Magnit.habitat.nuclearBomb = 0;
                        break;
                    default:
                        Magnit.habitat.nuclearBomb = 9;
                        break;
                }
            }
        });
        // spawn OFF

        MariaRa.add(lenta);
        MariaRa.add(timer1, BorderLayout.EAST);

        // всякое для менюbar ON

        JComboBox spawnChanse_1 = new JComboBox();
        TextField ZaycevNET_1 = new TextField();
        JCheckBox lenta_1 = new JCheckBox();
        ButtonGroup group_1 = new ButtonGroup();
        JRadioButton visibel_1 = new JRadioButton();
        JRadioButton invisible_1 = new JRadioButton();

        spawnChanse_1.setFocusable(false);
        ZaycevNET_1.setFocusable(true);
        lenta_1.setFocusable(false);
        visibel_1.setFocusable(false);
        invisible_1.setFocusable(false);

        spawnChanse_1.addItem("10%");
        spawnChanse_1.addItem("20%");
        spawnChanse_1.addItem("30%");
        spawnChanse_1.addItem("40%");
        spawnChanse_1.addItem("50%");
        spawnChanse_1.addItem("60%");
        spawnChanse_1.addItem("70%");
        spawnChanse_1.addItem("80%");
        spawnChanse_1.addItem("90%");
        spawnChanse_1.addItem("100%");
        spawnChanse_1.setFocusable(false);
        spawnChanse_1.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                switch (spawnChanse_1.getSelectedIndex()) {
                    case 1:
                        Magnit.habitat.nuclearBomb = 9;
                        break;
                    case 2:
                        Magnit.habitat.nuclearBomb = 8;
                        break;
                    case 3:
                        Magnit.habitat.nuclearBomb = 7;
                        break;
                    case 4:
                        Magnit.habitat.nuclearBomb = 6;
                        break;
                    case 5:
                        Magnit.habitat.nuclearBomb = 5;
                        break;
                    case 6:
                        Magnit.habitat.nuclearBomb = 4;
                        break;
                    case 7:
                        Magnit.habitat.nuclearBomb = 3;
                        break;
                    case 8:
                        Magnit.habitat.nuclearBomb = 2;
                        break;
                    case 9:
                        Magnit.habitat.nuclearBomb = 1;
                        break;
                    case 10:
                        Magnit.habitat.nuclearBomb = 0;
                        break;
                    default:
                        Magnit.habitat.nuclearBomb = 9;
                        break;
                }
            }
        });

        ZaycevNET_1.setText("1000");
        ZaycevNET_1.setColumns(10);
        ZaycevNET_1.setFocusable(false);

        try {
            a = Integer.parseInt(ZaycevNET_1.getText());
            if (a < 0)
                throw new NumberFormatException();
        } catch (NumberFormatException e) {
            fail();
            ZaycevNET_1.setText("1000");
            a = 1000;
        }

        lenta_1.setFocusable(false);
        lenta_1.addItemListener((ItemListener) new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                msgBox.setVisible(!msgBox.isVisible());
            }
        });

        visibel_1 = new JRadioButton("VISIBLE TIME");
        group.add(visibel_1);
        MariaRa.setFocusable(false);
        visibel.setFocusable(false);

        visibel_1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.numTimer = true;
                timer1.setVisible(Magnit.habitat.numTimer);
            }
        });

        invisible_1 = new JRadioButton("INVISIBLE TIME");
        group.add(invisible_1);
        invisible_1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.numTimer = false;
                timer1.setVisible(Magnit.habitat.numTimer);
            }
        });
        timer1.setFocusable(false);
        invisible_1.setFocusable(false);

        // всякое для менюbar OFF

        // menuBar ON
        // -------------------------------------------------------------------

        JComboBox spawnChanse_2 = new JComboBox();
        TextField ZaycevNET_2 = new TextField();
        JCheckBox lenta_2 = new JCheckBox();
        ButtonGroup group_2 = new ButtonGroup();
        JRadioButton visibel_2 = new JRadioButton();
        JRadioButton invisible_2 = new JRadioButton();
        B_2 = new JButton("START");
        E_2 = new JButton("STOP");

        spawnChanse_2.setFocusable(false);
        ZaycevNET_2.setFocusable(true);
        lenta_2.setFocusable(false);
        visibel_2.setFocusable(false);
        invisible_2.setFocusable(false);
        B_2.setFocusable(false);
        E_2.setFocusable(false);

        spawnChanse_2.addItem("10%");
        spawnChanse_2.addItem("20%");
        spawnChanse_2.addItem("30%");
        spawnChanse_2.addItem("40%");
        spawnChanse_2.addItem("50%");
        spawnChanse_2.addItem("60%");
        spawnChanse_2.addItem("70%");
        spawnChanse_2.addItem("80%");
        spawnChanse_2.addItem("90%");
        spawnChanse_2.addItem("100%");

        spawnChanse_2.setFocusable(false);
        spawnChanse_2.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                switch (spawnChanse_2.getSelectedIndex()) {
                    case 1:
                        Magnit.habitat.nuclearBomb = 9;
                        break;
                    case 2:
                        Magnit.habitat.nuclearBomb = 8;
                        break;
                    case 3:
                        Magnit.habitat.nuclearBomb = 7;
                        break;
                    case 4:
                        Magnit.habitat.nuclearBomb = 6;
                        break;
                    case 5:
                        Magnit.habitat.nuclearBomb = 5;
                        break;
                    case 6:
                        Magnit.habitat.nuclearBomb = 4;
                        break;
                    case 7:
                        Magnit.habitat.nuclearBomb = 3;
                        break;
                    case 8:
                        Magnit.habitat.nuclearBomb = 2;
                        break;
                    case 9:
                        Magnit.habitat.nuclearBomb = 1;
                        break;
                    case 10:
                        Magnit.habitat.nuclearBomb = 0;
                        break;
                    default:
                        Magnit.habitat.nuclearBomb = 9;
                        break;
                }
            }
        });

        ZaycevNET_2.setText("1000");
        ZaycevNET_2.setColumns(10);
        ZaycevNET_2.setFocusable(false);

        try {
            a = Integer.parseInt(ZaycevNET_2.getText());
        } catch (NumberFormatException e) {
            fail();
            ZaycevNET_2.setText("1000");
            a = 1000;
        }

        lenta_2.setFocusable(false);
        lenta_2.addItemListener((ItemListener) new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                msgBox.setVisible(!msgBox.isVisible());
            }
        });

        visibel_2 = new JRadioButton("VISIBLE TIME");
        group.add(visibel_2);
        MariaRa.setFocusable(false);
        visibel.setFocusable(false);

        visibel_2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.numTimer = true;
                timer1.setVisible(Magnit.habitat.numTimer);
            }
        });

        invisible_2 = new JRadioButton("INVISIBLE TIME");
        group.add(invisible_2);

        invisible_2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.numTimer = false;
                timer1.setVisible(Magnit.habitat.numTimer);
            }
        });
        timer1.setFocusable(false);
        invisible_2.setFocusable(false);

        B_2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.toggleSimulation();
                B_2.setEnabled(false);
                E_2.setEnabled(true);
            }
        });

        E_2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.stopSimulation();
                newWindow();

            }
        });

        // всякое для менюbar OFF

        JMenuBar menubar = new JMenuBar();
        JMenu menu = new JMenu("menu");

        JMenuItem itm = new JMenuItem("Start");
        menu.add(itm);
        itm.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.toggleSimulation();
                B.setEnabled(false);
                E.setEnabled(true);
            }
        });

        itm = new JMenuItem("Stop");
        menu.add(itm);
        itm.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Magnit.habitat.toggleSimulation();
                B.setEnabled(false);
                E.setEnabled(true);
            }
        });

        menubar.add(menu);
        menubar.add(lenta_1);
        menubar.add(visibel_1);
        menubar.add(invisible_1);

        setJMenuBar(menubar);

        // menuBar OFF ----------------------------------------------------------------

        // ToolBar ON
        JToolBar tbCommon = new JToolBar();
        tbCommon.add(B_2);
        tbCommon.add(E_2);

        tbCommon.add(lenta_2);
        tbCommon.add(visibel_2);
        tbCommon.add(invisible_2);
        MariaRa.add(tbCommon, BorderLayout.WEST);
        // ToolBar OFF

        // Объекты ON
        JButton currentObjectsButton = new JButton("Текущие объекты");
        currentObjectsButton.addActionListener(e -> {
            new ObjectListDialog(this, Magnit.habitat.birthTimes).setVisible(true);
        });
        MariaRa.add(currentObjectsButton);

        sleep = new JButton("SLEEP");
        awake = new JButton("AWAKE");

        sleep.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                workerAI.pauseAi();
                warriorAI.pauseAi();
            }
        });

        awake.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                workerAI.resumAi();
                warriorAI.resumAi();
            }
        });
        sleep.setFocusable(false);
        awake.setFocusable(false);

        MariaRa.add(sleep);
        MariaRa.add(awake);

        // workerAI.pauseAi();
        // warriorAI.pauseAi();

        // Объекты OFF

        setFocusable(true);
        pack();
        setVisible(true);
    }

    TextArea getText1() {
        TextArea textArea = new TextArea();
        textArea.setEditable(false);
        textArea.setFocusable(false);

        textArea.setText("\n Ants warriorscreated - " + App.Magnit.habitat.Tarakan_1 + "\n Ants workers created - "
                + App.Magnit.habitat.Tarakan_2 + "\nAnts warriors died - " + App.Magnit.habitat.Tarakan_1_Dead
                + "\nAnts workers died - " + App.Magnit.habitat.Tarakan_2_Dead + "\n");
        return textArea;
    }

    TextArea getText2() {
        TextArea textArea = new TextArea();
        textArea.setEditable(true);
        textArea.setEditable(false);
        textArea.setText("Ошибка, вы совершили ошибку ввода");
        textArea.setFocusable(false);

        return textArea;
    }

    void newWindow() {
        msgBox = new MessageBox("String of message", new JFrame(), "Message box", true, this, true);
        msgBox.setFocusable(false);

    }

    void fail() {
        Error = new MessageBox("String of message", new JFrame(), "Message box", true, this, false);
        Error.setFocusable(false);

        setVisible(true);
    }

   public static void main(String[] args) {
    Habitat habitat = new Habitat(); // Предполагая, что Habitat - это ваш класс
    WorkerAntAI workerAI = new WorkerAntAI(habitat);
    WarriorAntAI warriorAI = new WarriorAntAI(habitat);
    App app = new App(workerAI, warriorAI); // Передача объектов workerAI и warriorAI в конструктор App
}
}

// Говнокод OFF

abstract class BaseAI extends Thread {
    boolean itsWork = true;

    public void run() {
        while (true) {
            synchronized(this) {
                if(!itsWork){
                    try{
                        wait();
                    } catch(InterruptedException e){
                        System.out.println("Гоооооооол!");
                    }
                }
            }
            moveAi();
        }
    }
    abstract public void moveAi();

    public synchronized void pauseAi() {
        itsWork = false;
    }
    
    public synchronized void resumAi(){
        notify();
        itsWork = true;
    }

}

import java.util.Vector;

class WarriorAntAI extends BaseAI {
    Habitat New_Warrior;
    App Morder;
    Rivyera Olimp;
    Vector<AntWarrior> Ants1_new;

    double speed = 0.1;

    public WarriorAntAI(Habitat New_Warrior) {
        this.New_Warrior = New_Warrior;
    }

    // public void moveAi() {
    // for (int i = 0; i < New_Warrior.Ants1.size(); i++) {

    // // Сделать обработку на начальные
    // // кординаты!!!-----------------------------------

    // if (!(New_Warrior.Ants1.get(i).x > 799 || New_Warrior.Ants1.get(i).x < 0 ||
    // New_Warrior.Ants1.get(i).y > 799
    // || New_Warrior.Ants1.get(i).y < 0)) {
    // // true - left, false - right
    // if (New_Warrior.Ants1.get(i).derection == true) {
    // New_Warrior.Ants1.get(i).x = New_Warrior.Ants1.get(i).x - spead;
    // New_Warrior.Ants1.get(i).y = New_Warrior.Ants1.get(i).y - spead;
    // }
    // if (New_Warrior.Ants1.get(i).derection == false) {
    // New_Warrior.Ants1.get(i).x = New_Warrior.Ants1.get(i).x + spead;
    // New_Warrior.Ants1.get(i).y = New_Warrior.Ants1.get(i).y + spead;
    // }

    // } else {
    // New_Warrior.Ants1.get(i).derection = !(New_Warrior.Ants1.get(i).derection);
    // }
    // System.out.println("Warrior");
    // App.Magnit.repaint();

    // }

    public void moveAi() {
        synchronized (New_Warrior.Ants1) {
        for (int i = 0; i < New_Warrior.Ants1.size(); i++) {
            if (i < New_Warrior.Ants1.size()) {
                // Предположим, что радиус окружности R и центр окружности в (homeX, homeY)
                // Для упрощения примера, рассмотрим движение по половине окружности

                double radius = 100; // Установите радиус окружности
                double centerX = New_Warrior.Ants1.get(i).homeX; // Установите координату X центра окружности
                double centerY = New_Warrior.Ants1.get(i).homeY + radius; // Установите координату Y центра окружности

                // Рассчитаем новые координаты, используя параметрические уравнения окружности
                New_Warrior.Ants1.get(i).angle += Math.PI / 180; // Установите угловой шаг, например, 1 градус
                New_Warrior.Ants1.get(i).x = (int) (centerX + radius * Math.cos(New_Warrior.Ants1.get(i).angle));
                New_Warrior.Ants1.get(i).y = (int) (centerY + radius * Math.sin(New_Warrior.Ants1.get(i).angle));
            }
        }}
    }

    // public void moveAi() {
    //     for (int i = 0; i < New_Warrior.Ants1.size(); i++) {
    //         if (!(New_Warrior.Ants1.get(i).x > 799 || New_Warrior.Ants1.get(i).x < 0 || New_Warrior.Ants1.get(i).y > 799 || New_Warrior.Ants1.get(i).y < 0)) {
    //             if (New_Warrior.Ants1.get(i).derection == true) {
    //                 New_Warrior.Ants1.get(i).x = New_Warrior.Ants1.get(i).x - speed;
    //                 New_Warrior.Ants1.get(i).y = New_Warrior.Ants1.get(i).y - speed;
    //             }
    //             if (New_Warrior.Ants1.get(i).derection == false) {
    //                 New_Warrior.Ants1.get(i).x = New_Warrior.Ants1.get(i).x + speed;
    //                 New_Warrior.Ants1.get(i).y = New_Warrior.Ants1.get(i).y + speed;
    //             }
    //         } else {
    //             New_Warrior.Ants1.get(i).derection = !(New_Warrior.Ants1.get(i).derection);
    //         }
    //         System.out.println("Warrior");
    //         App.Magnit.repaint();
    //     }
    // }
    

    public synchronized void pauseAi() {
        itsWork = false;
    }

    public synchronized void resumAi() {
        notify();
        itsWork = true;
    }
}


import java.util.Random;
import java.util.Vector;

class WorkerAntAI extends BaseAI {
    Habitat New_Worker;
    App Morder;
    double speed = 0.1;
    boolean isFinPoint = true;
    Random rand = new Random();
    // int direction = 0;
    // int pre_direction = 5;
    // int direction = rand.nextInt(4);

    // 0 - left top
    // 1 - right top
    // 2 - left down
    // 3 - right down
    // 5 - home

    public WorkerAntAI(Habitat New_Worker) {
        this.New_Worker = New_Worker;
    }

    public void moveAi() {
        synchronized (New_Worker.Ants2) {
        for (int i = 0; i < New_Worker.Ants2.size(); i++) {
            if (isFinPoint) {
                
                System.out.println("direction - " + New_Worker.Ants2.get(i).direction);
                switch (New_Worker.Ants2.get(i).direction) {
                    case 0:
                        New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) - New_Worker.Ants2.get(i).x;
                        New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) - New_Worker.Ants2.get(i).y;

                        if (New_Worker.Ants2.get(i).x == 0 && New_Worker.Ants2.get(i).y == 0) {
                            New_Worker.Ants2.get(i).pre_direction = 0;
                            New_Worker.Ants2.get(i).direction = 4;
                        }
                        break;
                    case 1:
                        New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) + New_Worker.Ants2.get(i).x;
                        New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) - New_Worker.Ants2.get(i).y;

                        if (New_Worker.Ants2.get(i).x == 800 && New_Worker.Ants2.get(i).y == 0) {
                            New_Worker.Ants2.get(i).pre_direction = 1;
                            New_Worker.Ants2.get(i).direction = 4;
                        }
                        break;
                    case 2:
                        New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) - New_Worker.Ants2.get(i).x;
                        New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) + New_Worker.Ants2.get(i).y;

                        if (New_Worker.Ants2.get(i).x == 0 && New_Worker.Ants2.get(i).y == 800) {
                            New_Worker.Ants2.get(i).pre_direction = 2;
                            New_Worker.Ants2.get(i).direction = 4;
                        }
                        break;
                    case 3:
                        New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) + New_Worker.Ants2.get(i).x;
                        New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) + New_Worker.Ants2.get(i).y;

                        if (New_Worker.Ants2.get(i).x == 800 && New_Worker.Ants2.get(i).y == 800) {
                            New_Worker.Ants2.get(i).pre_direction = 3;
                            New_Worker.Ants2.get(i).direction = 4;
                        }
                        break;
                    case 4:
                        switch (New_Worker.Ants2.get(i).pre_direction) {
                            case 0:
                                New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) + New_Worker.Ants2.get(i).x;
                                New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) + New_Worker.Ants2.get(i).y;
                                break;
                            case 1:
                                New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) - New_Worker.Ants2.get(i).x;
                                New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) + New_Worker.Ants2.get(i).y;
                                break;
                            case 2:
                                New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) + New_Worker.Ants2.get(i).x;
                                New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) - New_Worker.Ants2.get(i).y;
                                break;
                            case 3:
                                New_Worker.Ants2.get(i).x = speed * (New_Worker.Ants2.get(i).x / New_Worker.Ants2.get(i).y) - New_Worker.Ants2.get(i).x;
                                New_Worker.Ants2.get(i).y = speed * (New_Worker.Ants2.get(i).y / New_Worker.Ants2.get(i).x) - New_Worker.Ants2.get(i).y;
                                break;
                        
                            default:
                                break;
                        }
                        if (New_Worker.Ants2.get(i).x == New_Worker.Ants2.get(i).homeX && New_Worker.Ants2.get(i).y == New_Worker.Ants2.get(i).homeY) {
                            New_Worker.Ants2.get(i).pre_direction = 4;
                            New_Worker.Ants2.get(i).direction = rand.nextInt(4);
                        }
                        break;

                    default:
                        break;
                }
            }
        }}
    }

    public synchronized void pauseAi() {
        itsWork = false;
    }

    public synchronized void resumAi() {
        notify();
        itsWork = true;
    }
}

// объявление нового класса диалога

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Vector;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

class MessageBox extends JDialog {
    
    public Object textArea;

    public MessageBox(String m, JFrame p, String t, boolean modal, App parent, boolean typeMessage)   {
        setSize(400, 200);
        JPanel VilkaLojka = new JPanel(new GridLayout(1, 2));
        
        setLayout(new BorderLayout());


        if (typeMessage == true) {
            add(parent.getText1());

            JButton exit = new JButton("exit");
            JButton ok = new JButton("ok");
            VilkaLojka.add(ok);
            VilkaLojka.add(exit);
            exit.setFocusable(false);
            ok.setFocusable(false);

            add(VilkaLojka, BorderLayout.SOUTH);
            setModal(modal);



            
            // VilkaLojka.setFocusable(false);
            // parent.MariaRa.setFocusable(false);
            // parent.Magnit.setFocusable(false);
            // parent.ZaycevNET.setFocusable(false);
            // parent.lenta.setFocusable(false);
            // // parent.visibel.setFocusable(false);
            // // parent.invisible.setFocusable(false);
            // parent.B.setFocusable(false);
            // parent.E.setFocusable(false);
            


            ok.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    App.Magnit.habitat.stopSimulation();//--------------------------остановиля на реализации окошка с статитстикой и кнопками
                    setVisible(false);
                    
                    parent.B.setEnabled(true);
                    parent.E.setEnabled(false);

                    parent.B_2.setEnabled(true);
                    parent.E_2.setEnabled(false);
                }
            });
    
            exit.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    App.Magnit.habitat.toggleSimulation();
                    setVisible(false);
                }
            });
            
        } else {
            add(parent.getText2());
            setFocusable(false);

            setVisible(true);
        }

        // setFocusable(false);

        setVisible(true);

     }
 }
 
 import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.Vector;

public class Habitat {
    String window;
    String Deats_warrior;
    String Deats_worker;
    // Image a;
    public int Tarakan_1;
    public int Tarakan_2;
    public int Tarakan_1_Dead;
    public int Tarakan_2_Dead;
    boolean simulationRunning;
    Timer timer;
    // ArrayList<AntWarrior> Ants1 = new ArrayList<AntWarrior>();
    // ArrayList<AntWorker> Ants2 = new ArrayList<AntWorker>();
    int simulationTime;
    boolean num = false;
    boolean numTimer = false;
    int timer_1;
    int nuclearBomb = 9;
    App chan;

    int warriorLifeTime;
    int workerLifeTime;

    Vector<AntWarrior> Ants1 = new Vector<>();
    Vector<AntWorker> Ants2 = new Vector<>();
    HashSet<Integer> antIds = new HashSet<>();
    TreeMap<Integer, Integer> birthTimes = new TreeMap<>();

    public Habitat() {
        // Инициализация вашего класса без аргументов
    }
    


    Habitat(App Si3Pio) {
        chan = Si3Pio;
        Ants1 = new Vector<>();
        antIds = new HashSet<>();
        birthTimes = new TreeMap<>();

    }

    public void setWarriorLifeTime(int lifeTime) {
        this.warriorLifeTime = lifeTime;
    }

    public void setWorkerLifeTime(int lifeTime) {
        this.workerLifeTime = lifeTime;
    }

    int setTarakan1() {
        return Tarakan_1;
    }

    int setTarakan2() {
        return Tarakan_2;
    }

    int setTarakan1_dead() {
        return Tarakan_1_Dead;
    }

    int setTarakan2_dead() {
        return Tarakan_2_Dead;
    }

    public void startSimulation() {
        simulationRunning = true;
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                Update(Ants1, Ants2);
                simulationTime++;
                timer_1++;
                chan.timer1.setText(String.valueOf(timer_1));
                try {
                    chan.a = Integer.parseInt(chan.ZaycevNET.getText());
                    if (chan.a < 0)
                        throw new NumberFormatException();
                } catch (NumberFormatException e) {
                    chan.fail();
                    chan.ZaycevNET.setText("1000");
                    chan.a = 1000;
                }
            }
        }, 0, 1000);
    }// -------------------------------------------------------------------------------------------------------
     // A

    public void stopSimulation() {
        simulationRunning = false;
        timer.cancel();
        timer.purge();
        Ants1.clear();
        Ants2.clear();
        timer_1 = 0;
    }

    public void toggleSimulation() {
        if (simulationRunning) {
            stopSimulation();
        } else {
            resetTarakan_1();
            resetTarakan_2();
            startSimulation();
        }
    }

    private void resetTarakan_1() {
        Tarakan_1 = 0;
    }

    private void resetTarakan_2() {
        Tarakan_2 = 0;
    }

    public int getNumStudents() {
        return Tarakan_1;
    }

    public int getNumStudentGirls() {
        return Tarakan_2;
    }

    void Update(Vector<AntWarrior> Ants1, Vector<AntWorker> Ants2) {
        Random rand = new Random();
        int x1 = rand.nextInt(10);
        int x2 = rand.nextInt(10);
        int x6 = rand.nextInt(10);
        int x3 = Ants1.isEmpty() ? 0 : rand.nextInt(Ants1.size());
        int x5 = Ants2.isEmpty() ? 0 : rand.nextInt(Ants2.size());
        int x4 = rand.nextInt(2);
        // Безумие ON

        if (timer_1 % (chan.a / 1000) == 0) {
            if (x1 > nuclearBomb) {
                if (x4 == 1) {
                    // Ants1.add(new AntWarrior());
                    Tarakan_1++;

                    AntWarrior ant = new AntWarrior(simulationTime, chan);
                    Ants1.add(ant);
                    antIds.add(ant.id);
                    birthTimes.put(ant.id, ant.birthTime);
                } else {
                    // Ants2.add(new AntWorker());
                    Tarakan_2++;

                    AntWorker ant = new AntWorker(simulationTime, chan);
                    Ants2.add(ant);
                    antIds.add(ant.id);
                    birthTimes.put(ant.id, ant.birthTime);
                }
            }

            // if (!Ants1.isEmpty() && x2 > 7) {
            // Ants1.remove(x3);
            // Tarakan_1_Dead++;
            // }
            // if (!Ants2.isEmpty() && x6 > 7) {
            // Ants2.remove(x5);
            // Tarakan_2_Dead++;
            // }

            for (AntWarrior ant : Ants1) {
                if (!ant.isAlive(simulationTime)) {
                    antIds.remove(ant.id);
                    birthTimes.remove(ant.id);
                    // Ants1.remove(ant);
                    Tarakan_1_Dead++;
                }
            }

            for (AntWorker ant : Ants2) {
                if (!ant.isAlive(simulationTime)) {
                    antIds.remove(ant.id);
                    birthTimes.remove(ant.id);
                    // Ants2.remove(ant);
                    Tarakan_2_Dead++;
                }
            }
        }
        Ants1.removeIf(ant -> !ant.isAlive(simulationTime));
        Ants2.removeIf(ant -> !ant.isAlive(simulationTime));
    }

    // Безумие OFF
    public void Static(int num) {

        window = new String("Ants warriorscreated - " + Tarakan_1 + " Ants workers created - " + Tarakan_2);
        Deats_warrior = new String("Ants warriors died - " + Tarakan_1_Dead);
        Deats_worker = new String(" Ants workers died - " + Tarakan_2_Dead);
        System.out.println(num);
    }
}

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.TextArea;
import java.awt.TextComponent;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

class ObjectListDialog extends JDialog {
    ObjectListDialog(JFrame parent, TreeMap<Integer, Integer> birthTimes) {
        super(parent, "Список объектов", true);

        JList<String> objectList = new JList<>(new DefaultListModel<>());
        DefaultListModel<String> model = (DefaultListModel<String>) objectList.getModel();

        for (Map.Entry<Integer, Integer> entry : birthTimes.entrySet()) {
            model.addElement("ID: " + entry.getKey() + ", Время рождения: " + entry.getValue());
        }

        JPanel contentPane = new JPanel(new BorderLayout());
        contentPane.add(new JScrollPane(objectList), BorderLayout.CENTER);
        setContentPane(contentPane);

        pack();
        setLocationRelativeTo(parent);
    }
}


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.JPanel;



public class Rivyera extends JPanel {

    Habitat habitat;

    Image a;
    

    Rivyera(App R2D2) {
        setPreferredSize(new Dimension(800, 800));
        habitat = new Habitat(R2D2);
    }
    

    @Override
    protected void paintComponent(Graphics g) {
        a = createImage(getSize().width, getSize().height);
        Graphics g2 = a.getGraphics();

        g2.clearRect(0, 0, getSize().width, getSize().height);
        for (int i = 0; i < habitat.Ants1.size(); i++) {
            habitat.Ants1.get(i).draw(g2);
        }
        for (int i = 0; i < habitat.Ants2.size(); i++) {
            habitat.Ants2.get(i).draw(g2);
        }
        if (habitat.num) {
            habitat.window = new String(
                    "Ants warriorscreated - " + habitat.Tarakan_1 + " Ants workers created - " + habitat.Tarakan_2);
            habitat.Deats_warrior = new String("Ants warriors died - " + habitat.Tarakan_1_Dead);
            habitat.Deats_worker = new String(" Ants workers died - " + habitat.Tarakan_2_Dead);

            g2.setColor(Color.blue);
            setFont(new Font("Papyrus", Font.ITALIC, 40));
            g2.drawString(habitat.window, 100, 300);

            g2.setColor(Color.red);
            setFont(new Font("Papyrus", Font.ITALIC, 40));
            g2.drawString(habitat.Deats_warrior, 200, 400);

            g2.setColor(Color.green);
            setFont(new Font("Papyrus", Font.ITALIC, 40));
            g2.drawString(habitat.Deats_worker, 600, 600);

           
        }
        g.drawImage(a, 0, 0, null);
    }
}
